{
    "name": "boost",
    "version": "1.61.0",
    "summary": "Boost provides free peer-reviewed portable C++ source libraries.",
    "homepage": "http://www.boost.org",
    "license": {
        "type": "Boost Software License",
        "file": "LICENSE_1_0.txt"
    },
    "authors": "Rene Rivera",
    "source": {
        "http": "https://sourceforge.net/projects/boost/files/boost/1.61.0/boost_1_61_0.tar.gz"
    },
    "platforms": {
        "ios": "9.0",
        "osx": "10.10"
    },
    "requires_arc": false,
    "preserve_paths": [
	"boost/*",
	"boost/**/*.{hpp,ipp}"
    ],
    "public_header_files": [
	"boost/*",
	"boost/**/*.{hpp,ipp}"
    ],
    "header_mappings_dir": ".",
    "subspecs": [
        {
            "name": "core",
            "source_files": ["boost/core/*.hpp"]
        },
        {
            "name": "string_algorithms-includes",
            "source_files": [
                "boost/algorithm/string.hpp",
                "boost/algorithm/string/**/*.hpp",
                "boost/config.hpp",
                "boost/config/**/*.hpp",
                "boost/range/**/*.hpp",
                "boost/static_assert.hpp",
                "boost/assert.hpp",
                "boost/current_function.hpp",
                "boost/integer.hpp",
                "boost/integer_fwd.hpp",
                "boost/cstdint.hpp",
                "boost/integer_traits.hpp",
                "boost/ref.hpp",
                "boost/checked_delete.hpp",
                "boost/next_prior.hpp",
                "boost/noncopyable.hpp",
                "boost/mem_fn.hpp",
                "boost/bind/**/*.hpp",
                "boost/get_pointer.hpp",
                "boost/limits.hpp",
                "boost/throw_exception.hpp",
                "boost/detail/**/*.hpp",
                "boost/exception/**/*.hpp",
                "boost/function.hpp",
                "boost/function_equal.hpp",
                "boost/function/**/*.hpp",
                "boost/concept_check.hpp",
                "boost/concept/**/*hpp",
                "boost/utility.hpp",
                "boost/utility/**/*.hpp",
                "boost/type_traits/**/*.hpp",
                "boost/mpl/**/*.hpp",
                "boost/preprocessor/**/*.hpp",
                "boost/iterator.hpp",
                "boost/iterator/**/*.hpp"
            ]
        },
        {
            "name": "shared_ptr-includes",
            "source_files": [
                "boost/shared_ptr.hpp",
                "boost/config.hpp",
                "boost/config/**/*.hpp",
                "boost/version.hpp",
                "boost/assert.hpp",
                "boost/current_function.hpp",
                "boost/checked_delete.hpp",
                "boost/throw_exception.hpp",
                "boost/exception/detail/attribute_noreturn.hpp",
                "boost/exception/exception.hpp",
                "boost/memory_order.hpp",
                "boost/detail/workaround.hpp",
                "boost/smart_ptr/shared_ptr.hpp",
                "boost/smart_ptr/detail/spinlock*.hpp",
                "boost/smart_ptr/detail/yield_k.hpp",
                "boost/smart_ptr/detail/shared_count.hpp",
                "boost/smart_ptr/bad_weak_ptr.hpp",
                "boost/smart_ptr/detail/sp_counted_base.hpp",
                "boost/smart_ptr/detail/sp_counted_base_spin.hpp",
                "boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp",
                "boost/detail/sp_typeinfo.hpp",
                "boost/smart_ptr/detail/sp_has_sync.hpp",
                "boost/smart_ptr/detail/sp_counted_impl.hpp",
                "boost/smart_ptr/detail/sp_convertible.hpp",
                "boost/smart_ptr/detail/operator_bool.hpp"
            ]
        },
        {
            "name": "pointer_cast-includes",
            "source_files": "boost/pointer_cast.hpp"
        },
        {
            "name": "numeric-includes",
            "source_files": "boost/numeric/**/*.hpp"
        },
        {
            "name": "preprocessor-includes",
            "source_files": "boost/preprocessor/**/*.hpp"
        },
        {
            "name": "math-includes",
            "source_files": [
                "boost/math/**/*.hpp",
                "boost/limits.hpp",
                "boost/static_assert.hpp",
                "boost/cstdint.hpp",
                "boost/config.hpp",
                "boost/config/**/*.hpp",
                "boost/version.hpp",
                "boost/detail/endian.hpp",
                "boost/detail/limits.hpp",
                "boost/mpl/**/*.hpp",
                "boost/type_traits.hpp",
                "boost/type_traits/**/*.hpp",
                "boost/accumulators/**/*.hpp",

                "boost/predef.h",
                "boost/predef/**/*.h",
                "boost/lexical_cast.hpp",
                "boost/lexical_cast/*.hpp",
                "boost/lexical_cast/**/*.hpp",
                "boost/atomic/*.hpp",
                "boost/**/*.h",
                "boost/**/*.hpp",
                "boost/**/**/*.h",
                "boost/**/**/*.hpp"
            ]
        },
        {
            "name": "graph-includes",
            "source_files": [
                "boost/*.hpp",
                "boost/{algorithm,archive,bimap,bind,chrono,concept,config,container,date_time,detail,dynamic_bitset,exception,filesystem,format,function,functional,fusion,graph,integer,intrusive,io,iterator,math,move,mpi,mpl,multi_index,numeric,optional,parameter,pending,preprocessor,property_map,property_tree,proto,python,random,range,ratio,regex,serialization,smart_ptr,spirit,system,test,thread,tr1,tuple,type_traits,typeof,units,unordered,utility,variant,xpressive}/**/*.{hpp,ipp}",
                "boost/xpressive/**/*.ipp"
            ]
        }
    ]
}
